plugins {
    id 'java'
    id 'application'
    id "com.google.protobuf" version "0.8.11"
    id 'com.palantir.docker' version '0.25.0'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

def grpcVersion = '1.20.0' // CURRENT_GRPC_VERSION

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:28.1-jre'

    compile group: 'io.grpc', name: 'grpc-all', version: '1.1.2'
    compile group: 'io.grpc', name: 'grpc-netty', version: '1.1.2'
    compile group: 'io.grpc', name: 'grpc-protobuf', version: '1.1.2'
    compile group: 'io.grpc', name: 'grpc-stub', version: '1.1.2'
    compile group: 'io.grpc', name: 'grpc-services', version: '1.1.2'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    testImplementation "io.grpc:grpc-testing:${grpcVersion}"
    testImplementation "org.mockito:mockito-core:2.28.2"
}

protobuf {
    // Configure the protoc executable
    protoc {
        // Download from repositories
        artifact = 'com.google.protobuf:protoc:3.0.2'
    }

    // Configure the codegen plugins
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.1.2'
        }
    }

    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

sourceSets {
    main {
        proto{
            srcDir '${project.projectDir}/src/main/proto'
        }
        java {
            // include generated code
            srcDir 'build/generated/source/proto/main/java'
            srcDir 'build/generated/source/proto/main/grpc'
        }
    }
    test {
    	java {
    		srcDir '${project.projectDir}/src/test'
    	}
    }
}

application {
    // Define the main class for the application.
    mainClassName = 'msg.server.UserServer'
}

jar {
    manifest {
        attributes(
                'Main-Class': 'msg.server.UserServer'
        )
    }
    from {
        configurations.compile.collect { 
            it.isDirectory() ? it : zipTree(it) 
        }
    }
}